#include "BeamEvent.fcl"
#include "services_refactored_pdune.fcl"
#include "caldata_dune.fcl"
#include "wirecell_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "Deconvolution.fcl"
#include "OpHitFinderDeco.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "services_dune.fcl"
#include "ProtoDUNETruthBeamFilter.fcl"
#include "PDHDAnalyzer.fcl"
#include "tools_dune.fcl"
#include "protodune_tools_dune.fcl"


#

process_name: PDHDAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "%ifb_pdhd_ntuple.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:                      @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_data
                        @table::protodunehd_services
  BackTrackerService: {
    BackTracker: {
      SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
      G4ModuleLabel: "largeant"
      MinimumHitEnergyFraction: 1e-1
    }
  }
  FileCatalogMetadataDUNE: { }
  TFileMetadataDUNE: @local::dune_tfile_metadata
  IFBeam:            {}
}
services.TFileMetadataDUNE.dataTier: "root-tuple-virtual"

source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["input_file.root"]
}

physics:
{

 producers: { 
    ##Producers for forcing pandora to create track or shower objects
    ##for each PFParticle
    pandora2Track:         @local::dune_pandoraTrackCreation
    pandora2calo:          @local::pdune_sp_alltrackcalomcsce
    pandora2calonosce:     @local::pdune_sp_alltrackcalomcnosce
    pandora2pid:           @local::standard_chi2pid
    pandora2Shower:        @local::dune_pandoraShowerCreation
    pandora2Showercalo:    @local::pdune_sp_allshowercalomcsce
    pandora2Showercalonosce:    @local::pdune_sp_allshowercalomcnosce

    #beamevent:          @local::pdhd_beamevent
 }

 reco: [] #beamevent]

 analyzers:
 {
  pduneana:          @local::pdhdanalysis
 }
 
 ana:  [ pduneana ]

 #stream1: [ out1 ]
 
 end_paths:     [ ana ]

}

outputs: {}
services.ParticleInventoryService.ParticleInventory.EveIdCalculator: "EmEveIdCalculator"
#services.DetectorPropertiesService.Electronlifetime: 35000

##Need this? 
services.SpaceCharge.InputFilename:        		"ProtoDUNE/HD/SpaceCharge/Sim_NoFluidFlow/v2/SCE_PDHD_Sim_NoFluidFlow_E500_v2.root"
services.SpaceCharge.CalibrationInputFilename:          "ProtoDUNE/HD/SpaceCharge/Sim_NoFluidFlow/v2/SCE_PDHD_Sim_NoFluidFlow_E500_v2.root"
services.SpaceCharge.RepresentationType:               "Splines_TH3"
services.SpaceCharge.service_provider:                  SpaceChargeServiceProtoDUNEhd

# Electron Diverter sim should remain off for HD
services.SpaceCharge.EnableElectronDiverterDistortions: []
services.SpaceCharge.EDZCenter:                         [] # gap center in cm
services.SpaceCharge.EDAXPosOffs:                       []  # X distortion shift scale in cm
services.SpaceCharge.EDBZPosOffs:                       [] #  Z distoriton shift scale in cm
services.SpaceCharge.EDs:                               [] # width of distortion function in cm
services.SpaceCharge.EDChargeLossZLow:                  [] # range in which charge is lost, low end, cm in Z
services.SpaceCharge.EDChargeLossZHigh:                 [] # range in which charge is lost, high end, cm in Z

services.SpaceCharge.EnableCalEfieldSCE: false
services.SpaceCharge.EnableCalSpatialSCE: false
services.SpaceCharge.EnableCorrSCE: false
services.SpaceCharge.EnableSimEfieldSCE: false
services.SpaceCharge.EnableSimSpatialSCE: false

# Use channel map service for data
services.ExptGeoHelperInterface.ChannelMapClass: "DuneApaChannelMapAlg"
#Forcing Pandora to create either all tracks or all showers on each PFParticle object
####The above line forces pandora to fit a track to all PFParticles
physics.analyzers.pduneana.NoBeamInst: false
#physics.analyzers.pduneana.SkipMVA: true
physics.analyzers.pduneana.VPlaneAsCollector: true
physics.analyzers.pduneana.CalorimetryTagSCE: "pandoraGnocchiCalonosce"
physics.analyzers.pduneana.CalorimetryTagNoSCE: "pandoraGnocchiCalonosce"
#physics.producers.beamevent.MatchTime:            true
