#include "services_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "filters.fcl"
#include "ProtoDUNEUnstableHVFilter.fcl"
#include "signalservices_dune.fcl"
#include "caldata_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "ecalibration.fcl"
#include "triggeralgo_service.fcl"
#include "photpropservices_dune.fcl"
#include "ProtoDUNEDataUtils.fcl"
#include "ProtoDUNEFembFilter.fcl"


process_name: StopMuonTracker

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "StopMuonTracker.root" }
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::protodune_services
  message:      @local::standard_info
  FileCatalogMetadata: @local::art_file_catalog_mc
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}
physics:
{
 producers:{

  }
filters:	
 {
#  filter:   @local::pdsp_fembfilter_all
f1: @local::HVfilter
   } 
   fpath: [f1]

 analyzers:{
   StopMuonTracker:
   {
   module_type: "StopMuonTracker"
 }
 }
 

ana:  [ StopMuonTracker ]
 end_paths:     [  ana ] 
}

# define the list of LArSoft modules to run through the simulate path


physics.analyzers.StopMuonTracker.PFPModuleLabel:          "pandora"
physics.analyzers.StopMuonTracker.TrackModuleLabel:        "pandoraTrack"
physics.analyzers.StopMuonTracker.OpHitModuleLabel:        "ophitInternal"
physics.analyzers.StopMuonTracker.FlashModuleLabel:      "opflashInternal"
physics.analyzers.StopMuonTracker.OpHitTriggerModuleLabel:    "ophitExternal"
physics.analyzers.StopMuonTracker.FlashTriggerModuleLabel:  "opflashExternal"
physics.analyzers.StopMuonTracker.SpacePointLabel:         "pandora"
physics.analyzers.StopMuonTracker.HitModuleLabel:          "hitpdune"
physics.analyzers.StopMuonTracker.ShowerModuleLabel:       "pandoraShower"

