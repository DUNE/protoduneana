#include "PionAnalyzer.fcl"
#include "services_dune.fcl"
#include "ProtoDUNETruthBeamFilter.fcl"
#include "PrimaryPionSelection.fcl"

process_name: PionAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "pionana_mc.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:                      @local::dune_message_services_prod_debug
  FileCatalogMetadata:          @local::art_file_catalog_mc
                                @table::protodune_services
  PdspChannelMapService:        @local::pdspchannelmap
  ChannelStatusService:         @local::pdsp_channel_status
}
services.message.destinations.LogStandardOut.threshold: "INFO"

source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["input_file.root"]
}

physics:
{

 producers: { 
 
 }

 filters: { 
   fTruth: @local::beam_filter
   fPrimaryPion: @local::pion_primary_filter
 }

 fpath: [fTruth, fPrimaryPion]

 analyzers:
 {
  pionana:          @local::pionanalysis
 }
 
 ana:  [ pionana ]

 end_paths:     [ ana ]

}

outputs: {}

physics.filters.fTruth.PDG: [211, -13]
physics.analyzers.pionana.SelectEvents: ["fpath"]
physics.analyzers.pionana.NSliceCheck: 2
physics.analyzers.pionana.CalorimetryTag: "pandoracaloSCE"
physics.analyzers.pionana.HitTag: "hitpdune"
physics.analyzers.pionana.Verbose: true 
physics.analyzers.pionana.DoReweight: true 
