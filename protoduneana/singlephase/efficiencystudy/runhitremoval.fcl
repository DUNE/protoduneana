#include "services_dune.fcl"
#include "ProtoDUNEBeamCuts.fcl"
#include "ProtoDUNEBeamlineUtils.fcl"
#include "protodune_tools_dune.fcl"

process_name: HadronHitsRemoval

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "hitremoval.root" }
  TimeTracker:       {}
  MemoryTracker:         { }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
                @table::protodune_data_reco_services
  message:      @local::standard_info
  IFDH: {}
}

#services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
#services.SpaceCharge.EnableCalEfieldSCE: true
#services.SpaceCharge.EnableCalSpatialSCE: true
#physics.analyzers.hitana.SaveTrackInfo: true

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_hhr.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

#added physics-> productors -> module types

physics:
{
  producers:
  {
      hhr: {module_type:          "HadronHitsRemoval"
        GeneratorTag:         "generator"
        #BeamCuts:             @local::Prod2BeamCuts
        BeamlineUtils:        @local::standard_protodunebeamlineutils

        #TrackerTag:              "pandoraTrack"
        #HitTag:                  "hitpdune"
        #ShowerTag:               "pandoraShower"
        PFParticleTag:           "pandora"
        HitTag:                  "hitpdune"
      }
  }
  reco: [hhr]
  stream1:  [ out1 ]
  trigger_paths: [reco]
  end_paths:     [stream1]
}
#add physics block and imbeded  
